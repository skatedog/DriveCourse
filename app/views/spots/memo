<%= render "layouts/error_messages", resource: place %>
<input id="form_word" type="textbox">
<input type="button" value="検索" onclick="ChangeByFormWord()">
<%= form_with model: [current_user, place], local: true do |f| %>
  <%= f.label :genre_id %>
  <%= f.collection_select :genre_id, Genre.all, :id, :name %>
  <%= f.radio_button :is_protected, TRUE %>
  <%= f.label :is_protected, "非公開", value: TRUE %>
  <%= f.radio_button :is_protected, FALSE %>
  <%= f.label :is_protected, "公開", value: FALSE %>
  <%= f.label :name %>
  <%= f.text_field :name %><br>
  <%= f.label :introduction %>
  <%= f.text_area :introduction %><br>
  <%= f.hidden_field :address %><br>
  <%= f.hidden_field :latitude %><br>
  <%= f.hidden_field :longitude %><br>
  <%= f.submit %>
<% end %>

// 座標を基にviewと地図を更新する
const changeByLatLng = (latLng) => {
  geocoder.geocode( { latLng: latLng }, (results, status) => {
    if (status == 'OK') {
      let address = results[0].formatted_address.replace(/^日本、(〒\d{3}-\d{4} )?/,"");
      UpdatePlaceMap(latLng, address);
    } else {
      alert('Geocode was not successful for the following reason: ' + status);
    }
  });
}

// 検索ワードを基にviewと地図を更新する
const ChangeByFormWord = () => {
  let word = document.getElementById("form_word").value;
  geocoder.geocode( { address: word }, (results, status) => {
    if (status == 'OK') {
      let latLng = results[0].geometry.location;
      let address = results[0].formatted_address.replace(/^日本、(〒\d{3}-\d{4} )?/,"");
      UpdatePlaceMap(latLng, address);
      $("#place_name").val(word);
    } else {
      alert('Geocode was not successful for the following reason: ' + status);
    }
  });
}

// viewと地図を更新する
const UpdatePlaceMap = (latLng, address) => {
  let lat = latLng.lat();
  let lng = latLng.lng();
  $("#place_latitude").val(lat);
  $("#place_longitude").val(lng);
  map.panTo(latLng);
  marker.setPosition(latLng);
}

class PlacesController < ApplicationController
  before_action :authenticate_user!
  before_action :ensure_correct_user, except: [:index, :show]

  def index
    places = User.find(params[:user_id]).places
    if params[:user_id].to_i == current_user.id
      @places = places
    else
      @places = places.where(is_protected: false)
    end
  end

  def show
    place = User.find(params[:user_id]).places.find(params[:id])
    if (place.user != current_user) && place.is_protected
      redirect_to user_places_path(current_user)
    end
    @place = place
  end

  def new
    @place = current_user.places.new
  end

  def create
    @place = current_user.places.new(place_params)
    if @place.save
      redirect_to user_place_path(current_user, @place)
    else
      render :new
    end
  end

  def edit
    @place = current_user.places.find(params[:id])
  end

  def update
    @place = current_user.places.find(params[:id])
    if @place.update(place_params)
      redirect_to user_place_path(current_user, @place)
    else
      render :edit
    end
  end

  def destroy
    current_user.places.find(params[:id]).destroy
    redirect_to user_places_path(current_user)
  end

  private
    def place_params
      params.require(:place).permit(:genre_id, :is_protected, :name, :introduction, :address, :latitude, :longitude)
    end
end



<%= render "layouts/error_messages", resource: course %>
<%= form_with model: [current_user, course], local: true do |f| %>
  <%= f.label :vehicle_id %>
  <%= f.collection_select :vehicle_id, current_user.vehicles, :id, :name %>

  <%= f.label :name %>
  <%= f.text_field :name %><br>
  <%= f.label :introduction %>
  <%= f.text_area :introduction %><br>
  <%= f.radio_button :is_protected, TRUE %>
  <%= f.label :is_protected, "非公開", value: TRUE %>
  <%= f.radio_button :is_protected, FALSE %>
  <%= f.label :is_protected, "公開", value: FALSE %>

  <%= f.label :origin %>
  <%= f.collection_select :origin, current_user.places, :id, :name %>

  <%= f.label :waypoint %>
  <%= f.collection_select :waypoint, current_user.places, :id, :name %>

  <%= f.label :destination %>
  <%= f.collection_select :destination, current_user.places, :id, :name %>

  <%= f.submit %>
<% end %>


<script>
  let spots = [
    { genre_id: 1, sort_number: 0, name: "渋谷駅", latitude: 35.6580382, longitude: 139.6994471, address:"東京都渋谷区" },
    { genre_id: 1, sort_number: 1, name: "新宿駅", latitude: 35.6895458, longitude: 139.7009638, address:"東京都新宿区新宿３丁目３８−１" },
    { genre_id: 1, sort_number: 2, name: "池袋駅", latitude: 35.7295071, longitude: 139.7087114, address:"東京都豊島区南池袋１丁目" },
  ]

  console.log(spots);
$(() => {
  $("#course_spots").val(JSON.stringify(spots));
})



</script>

<%= render "courses/spot_list", spots: @course.spots %>
<%= render "places/list" %>
<%= render "courses/map", spots: @course.spots %>

let spotsInfo = [];
<% spots.each do |spot| %>
	spotsInfo.push({
		id: "<%= spot.id %>",
		latitude: "<%= spot.latitude %>",
		lng: "<%= spot.longitude %>",
		sortNumber: "<%= spot.sort_number %>",
	});
<% end %>

<!--<% @course.spots.order(:sort_number).each do |spot| %>-->
<!--<%= spot.name %>-->
<!--<%= spot.latitude %>-->
<!--<%= spot.longitude %>-->
<!--<%= spot.sort_number %>-->
<!--<% end %>-->


/*global $*/

let list = []
let index;
let oldIndex;

$(() => {
  $( ".spot-list__list" ).sortable({
    opacity: 0.5,
    scroll: false,
    update: (event, ui) => {
      if (ui.sender == null) {
        list = $(".spot-list__list").sortable("toArray");
        // Ajux
        $.ajax({
          type: "PATCH",
          url: location.pathname.replace("/edit", ""),
          data: { ids: list },
          dataType : "script",
        })
        // Ajaxリクエストが成功した場合
        .done(function(data){
        })
        // Ajaxリクエストが失敗した場合
        .fail(function(XMLHttpRequest, textStatus, errorThrown){
          alert(errorThrown);
        });
      }
    },
    receive: (event, ui) => {
      console.log("receive");
      console.log(ui);
      let placeId = ui.item[0].id;
      index = $(".spot-list__list").children().index(ui.item[0]);
      // Ajux
      $.ajax({
        type: "POST",
        url: location.pathname.replace("edit", "spots"),
        data: {
          place_id: placeId,
          index: index,
        },
        dataType : "script",
      })
      // Ajaxリクエストが成功した場合
      .done(function(data){
      })
      // Ajaxリクエストが失敗した場合
      .fail(function(XMLHttpRequest, textStatus, errorThrown){
        alert(errorThrown);
      });
    },
  });
});

$(() => {
  $( ".place-list__list" ).sortable({
    opacity: 0.5,
    scroll: false,
    connectWith: ".spot-list__list",
    });
});


	$(".spot-list__list").children().eq(index).replaceWith("<%= j(render 'spots/record', spot: @spot) %>");


	  def create_sopts_by(place_ids)
    place_list = place_ids.map.with_index do |id, i|
     {
       place_id: id.to_i,
       sort_number: i,
       is_protected: self.is_protected,
     }
    end
    self.spots.create(place_list)
  end

  def add_spot(index, place_id)
    self.spots.each do |spot|
      if spot.sort_number >= index
        spot.update(sort_number: spot.sort_number + 1)
      end
    end
    self.spots.create(
      place_id: place_id,
      sort_number: index,
      is_protected: self.is_protected,
    )
  end

  def remove_spot(spot_id)
    p self.spots
    old_spot = self.spots.find(spot_id)
    index = old_spot.sort_number
    self.spots.each do |spot|
      if spot.sort_number > index
        spot.update(sort_number: spot.sort_number - 1)
      end
    end
    old_spot.destroy.sort_number
  end